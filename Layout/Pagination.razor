<div class="p-xl-2">
    <nav aria-label="Paginacao">
        <ul class="pagination justify-content-center">
            @foreach (var link in links)
            {
                <li @onclick="@(() => SelectedPageList(link))" style="cursor:pointer;"
                    class="page-item @(link.Enable ? null : "disabled") @(link.Active ? "active" : null)">
                    <span class="page-link" href="#">@link.Text</span>
                </li>
            }
        </ul>
    </nav>
</div>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; }
    [Parameter] public int Raio { get; set; } = 3;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    List<LinkModel> links;

    private class LinkModel
    {
        public LinkModel(int page) : this(page, true)
        {}

        public LinkModel(int page, bool enable) : this(page, enable, page.ToString())
        {}

        public LinkModel(int page, bool enable, string text)
        {
            Page = page;
            Text = text;
            Enable = enable;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enable { get; set; } = true;
        public bool Active { get; set; } = false;
    }

    private async Task SelectedPageList(LinkModel link)
    {
        if (link.Page == CurrentPage || !link.Enable)
        {
            return;
        }

        CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

    protected override void OnParametersSet()
    {
        LoadPages();
    }

    private void LoadPages()
    {
        links = new List<LinkModel>();

        var isPreviousPageLinkActive = CurrentPage != 1;
        var previousPage = CurrentPage - 1;

        links.Add(new LinkModel(previousPage, isPreviousPageLinkActive, "Anterior"));

        for (int i = 1; i <= TotalPages; i++)
        {
            if (i >= CurrentPage - Raio && i <= CurrentPage + Raio)
            {
                links.Add(new LinkModel(i)
                {
                    Active = CurrentPage == i
                });
            }
        }

        var isNextPageLinkActive = CurrentPage != TotalPages;
        var nextPage = CurrentPage + 1;

        links.Add(new LinkModel(nextPage, isNextPageLinkActive, "Próximo"));
    }
}
